apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory-upload'

group = "com.bottlerocketstudios"
version = "1.0.4-SNAPSHOT"

project.ext.artifactory_artifactid = "barcode"
project.ext.artifactory_packaging = "aar"
project.ext.artifactory_description = "Barcode scanning and generation library"
project.ext.artifactory_project_url = "https://github.com/BottleRocketStudios/Android-Barcode"
project.ext.artifactory_name = "com.bottlerocketstudios.barcode"
project.ext.artifactory_vcs_url = "https://github.com/BottleRocketStudios/Android-Barcode"

project.ext.bundle_name = "barcode"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.google.zxing:android-core:3.2.1'
}

project.ext.artifactory_credentials = "$System.env._ARTIFACTORY_CREDENTIALS"

def getMavenIdentityField(field, index) {
    //Default to global setting
    if (project.hasProperty(field)) {
        return project.ext[field]
    }

    //Use environment secure credential variable on Jenkins
    def split_values = project.ext.artifactory_credentials.split(':')
    if (split_values.size() > index && split_values[index] != null) {
        return split_values[index]
    }
    logger.log(LogLevel.WARN, "Could not find maven identity field " + field)
    return ''
}

def getMavenUser() {
    return getMavenIdentityField('br_bintray_user', 0)
}

def getMavenPassword() {
    return getMavenIdentityField('br_bintray_password', 1)
}

android.libraryVariants.all { variant ->
    def javadocTask = task("android${variant.name.capitalize()}Javadoc", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
    def javadocJarTask = task("android${variant.name.capitalize()}JavadocJar", type: Jar, dependsOn: javadocTask){
        classifier = 'javadoc'
        from javadocTask.destinationDir
    }
    if (variant.buildType.name.equals(com.android.builder.core.BuilderConstants.RELEASE)) {
        artifacts.add('archives', javadocJarTask);
    }
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            groupId = project.group
            name = project.ext.artifactory_name
            artifactId = project.ext.artifactory_artifactid
            packaging = project.ext.artifactory_packaging
            version = project.version
            description = project.ext.artifactory_description
            url = project.ext.artifactory_project_url
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }
}

/**
 * Snapshots are uploaded to jfrog OSS
 */
artifactory {
    contextUrl = 'https://oss.jfrog.org'

    publish {
        repository {
            repoKey = 'oss-snapshot-local'

            username = project.getMavenUser()
            password = project.getMavenPassword()
        }

        defaults {
            publishConfigs('archives')
        }
    }
}

/**
 * Releases are uploaded to jcenter
 */
bintray {
    user = project.getMavenUser();
    key = project.getMavenPassword();

    configurations = ['archives']

    publish = true

    pkg {
        repo = "maven"
        name = project.ext.artifactory_name
        websiteUrl = project.ext.artifactory_project_url
        vcsUrl = project.ext.artifactory_vcs_url
        licenses = ["Apache-2.0"]
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

//Make a single task for CI server and upload to appropriate destination based on version. 
task uploadToMaven(dependsOn: {project.version =~ /.*-SNAPSHOT/ ? tasks['artifactoryPublish'] : tasks['bintrayUpload']}) {}
